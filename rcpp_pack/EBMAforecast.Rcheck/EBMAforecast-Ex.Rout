
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.2.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EBMAforecast"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "EBMAforecast-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('EBMAforecast')
Loading required package: separationplot
Loading required package: plyr
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:plyr’:

    is.discrete, summarize

The following objects are masked from ‘package:base’:

    format.pval, round.POSIXt, trunc.POSIXt, units

Loading required package: abind
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("EBMAforecast")
> ### * EBMAforecast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EBMAforecast
> ### Title: EBMAforecast
> ### Aliases: EBMAforecast EBMAforecast-package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D demo(EBMAforecast)
> ##D demo(presForecast)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EBMAforecast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ForecastData")
> ### * ForecastData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ForecastData-class
> ### Title: An ensemble forecasting data object
> ### Aliases: ForecastData-class setModelNames<-
> ###   setModelNames<-,ForecastData-method setOutcomeCalibration<-
> ###   setOutcomeCalibration<-,ForecastData-method setOutcomeTest<-
> ###   setOutcomeTest<-,ForecastData-method setPredCalibration<-
> ###   setPredCalibration<-,ForecastData-method setPredTest<-
> ###   setPredTest<-,ForecastData-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  data(calibrationSample)
> ##D 
> ##D data(testSample) 
> ##D this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> ##D 
> ##D ### to acces individual slots in the ForecastData object
> ##D getPredCalibration(this.ForecastData)
> ##D getOutcomeCalibration(this.ForecastData)
> ##D getPredTest(this.ForecastData)
> ##D getOutcomeTest(this.ForecastData)
> ##D getModelNames(this.ForecastData)
> ##D 
> ##D ### to assign individual slots, use set functions
> ##D 
> ##D setPredCalibration(this.ForecastData)<-calibrationSample[,c("LMER", "SAE", "GLM")]
> ##D setOutcomeCalibration(this.ForecastData)<-calibrationSample[,"Insurgency"]
> ##D setPredTest(this.ForecastData)<-testSample[,c("LMER", "SAE", "GLM")]
> ##D setOutcomeTest(this.ForecastData)<-testSample[,"Insurgency"]
> ##D setModelNames(this.ForecastData)<-c("LMER", "SAE", "GLM")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ForecastData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calibrateEnsemble")
> ### * calibrateEnsemble
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibrateEnsemble
> ### Title: Calibrate an ensemble Bayesian Model Averaging model
> ### Aliases: FDatFitLogit-class FDatFitNormal-class ForecastDataLogit-class
> ###   ForecastDataNormal-class calibrateEnsemble
> ###   calibrateEnsemble,ForecastData-method fitEnsemble
> ###   fitEnsemble,ForecastData-method fitEnsemble,ForecastDataLogit-method
> ###   fitEnsemble,ForecastDataNormal-method
> ### Keywords: EBMA calibrate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(calibrationSample)
> ##D 
> ##D data(testSample) 
> ##D 
> ##D this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> ##D 
> ##D this.ensemble <- calibrateEnsemble(this.ForecastData, model="logit", tol=0.001, exp=3)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibrateEnsemble", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compareModels")
> ### * compareModels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compareModels
> ### Title: Function for comparing multiple models based on predictive
> ###   performance
> ### Aliases: CompareModels-class compareModels
> ###   compareModels,ForecastData-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(calibrationSample)
> ##D 
> ##D data(testSample) 
> ##D 
> ##D this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> ##D 
> ##D this.ensemble <- calibrateEnsemble(this.ForecastData, model="logit", tol=0.001, exp=3)
> ##D 
> ##D compareModels(this.ensemble,"calibration")
> ##D 
> ##D compareModels(this.ensemble,"test") 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compareModels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("makeForecastData")
> ### * makeForecastData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: makeForecastData
> ### Title: Build a ensemble forecasting data object
> ### Aliases: ForecastData-generic ForecastData-method makeForecastData
> ###   makeForecastData,ANY-method makeForecastData-method,
> ###   print,ForecastData-method print-method, setModelNames<-,
> ###   setOutcomeCalibration, setOutcomeTest<-, setPredCalibration,
> ###   setPredTest, show,ForecastData-method show-method
> 
> ### ** Examples
> 
>  data(calibrationSample)
> 
> ## Not run: 
> ##D data(testSample) 
> ##D this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> ##D 
> ##D ### to acces individual slots in the ForecastData object
> ##D getPredCalibration(this.ForecastData)
> ##D getOutcomeCalibration(this.ForecastData)
> ##D getPredTest(this.ForecastData)
> ##D getOutcomeTest(this.ForecastData)
> ##D getModelNames(this.ForecastData)
> ##D 
> ##D ### to assign individual slots, use set functions
> ##D 
> ##D setPredCalibration(this.ForecastData)<-calibrationSample[,c("LMER", "SAE", "GLM")]
> ##D setOutcomeCalibration(this.ForecastData)<-calibrationSample[,"Insurgency"]
> ##D setPredTest(this.ForecastData)<-testSample[,c("LMER", "SAE", "GLM")]
> ##D setOutcomeTest(this.ForecastData)<-testSample[,"Insurgency"]
> ##D setModelNames(this.ForecastData)<-c("LMER", "SAE", "GLM")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("makeForecastData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot-FDatFitLogit-method")
> ### * plot-FDatFitLogit-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot,FDatFitLogit-method
> ### Title: Plotting function for ensemble models of the class
> ###   "FDatFitLogit" or "FDatFitNormal", which are the objects created by
> ###   the 'calibrateEnsemble()' function.
> ### Aliases: plot,FDatFitLogit-method plot,FDatFitNormal-method
> 
> ### ** Examples
> 
> data(calibrationSample)
> 
> data(testSample) 
> 
> this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
+ .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
+ .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> 
> this.ensemble <- calibrateEnsemble(this.ForecastData, model="logit", tol=0.001, exp=3)
> 
> plot(this.ensemble, period="calibration") 
> plot(this.ensemble, period="test")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot-FDatFitLogit-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary-FDatFitLogit-method")
> ### * summary-FDatFitLogit-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary,FDatFitLogit-method
> ### Title: Summary Function
> ### Aliases: SummaryForecastData-class print,SummaryForecastData-method
> ###   show,SummaryForecastData-method summary,FDatFitLogit-method
> ###   summary,FDatFitNormal-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  data(calibrationSample)
> ##D 
> ##D data(testSample) 
> ##D 
> ##D this.ForecastData <- makeForecastData(.predCalibration=calibrationSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeCalibration=calibrationSample[,"Insurgency"],.predTest=testSample[,c("LMER", "SAE", "GLM")],
> ##D .outcomeTest=testSample[,"Insurgency"], .modelNames=c("LMER", "SAE", "GLM"))
> ##D 
> ##D this.ensemble <- calibrateEnsemble(this.ForecastData, model="logit", tol=0.001,exp=3)
> ##D 
> ##D summary(this.ensemble, period="calibration") 
> ##D 
> ##D summary(this.ensemble, period="test",showCoefs=FALSE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary-FDatFitLogit-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.182 0.042 1.232 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
